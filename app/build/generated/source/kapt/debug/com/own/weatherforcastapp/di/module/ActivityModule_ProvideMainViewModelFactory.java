// Generated by Dagger (https://google.github.io/dagger).
package com.own.weatherforcastapp.di.module;

import com.own.weatherforcastapp.data.repository.CurrentWeatherRepository;
import com.own.weatherforcastapp.ui.main.MainViewModel;
import com.own.weatherforcastapp.utils.network.NetworkHelper;
import com.own.weatherforcastapp.utils.rx.SchedulerProvider;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

public final class ActivityModule_ProvideMainViewModelFactory implements Factory<MainViewModel> {
  private final ActivityModule module;

  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  private final Provider<NetworkHelper> networkHelperProvider;

  private final Provider<CurrentWeatherRepository> currentWeatherRepositoryProvider;

  public ActivityModule_ProvideMainViewModelFactory(
      ActivityModule module,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<NetworkHelper> networkHelperProvider,
      Provider<CurrentWeatherRepository> currentWeatherRepositoryProvider) {
    this.module = module;
    this.schedulerProvider = schedulerProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
    this.networkHelperProvider = networkHelperProvider;
    this.currentWeatherRepositoryProvider = currentWeatherRepositoryProvider;
  }

  @Override
  public MainViewModel get() {
    return proxyProvideMainViewModel(
        module,
        schedulerProvider.get(),
        compositeDisposableProvider.get(),
        networkHelperProvider.get(),
        currentWeatherRepositoryProvider.get());
  }

  public static ActivityModule_ProvideMainViewModelFactory create(
      ActivityModule module,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<NetworkHelper> networkHelperProvider,
      Provider<CurrentWeatherRepository> currentWeatherRepositoryProvider) {
    return new ActivityModule_ProvideMainViewModelFactory(
        module,
        schedulerProvider,
        compositeDisposableProvider,
        networkHelperProvider,
        currentWeatherRepositoryProvider);
  }

  public static MainViewModel proxyProvideMainViewModel(
      ActivityModule instance,
      SchedulerProvider schedulerProvider,
      CompositeDisposable compositeDisposable,
      NetworkHelper networkHelper,
      CurrentWeatherRepository currentWeatherRepository) {
    return Preconditions.checkNotNull(
        instance.provideMainViewModel(
            schedulerProvider, compositeDisposable, networkHelper, currentWeatherRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
