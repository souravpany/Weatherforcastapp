// Generated by Dagger (https://google.github.io/dagger).
package com.own.weatherforcastapp.ui.main;

import androidx.recyclerview.widget.LinearLayoutManager;
import com.own.weatherforcastapp.ui.base.BaseActivity_MembersInjector;
import com.own.weatherforcastapp.ui.main.adapter.ForecastListAdapter;
import com.own.weatherforcastapp.ui.main.adapter.ForecastSlideListAdapter;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<MainViewModel> viewModelProvider;

  private final Provider<LinearLayoutManager>
      linearExtraLayoutManagerAndLinearLayoutManagerProvider;

  private final Provider<ForecastListAdapter> forecastListAdapterProvider;

  private final Provider<ForecastSlideListAdapter> forecastSlideListAdapterProvider;

  public MainActivity_MembersInjector(
      Provider<MainViewModel> viewModelProvider,
      Provider<LinearLayoutManager> linearExtraLayoutManagerAndLinearLayoutManagerProvider,
      Provider<ForecastListAdapter> forecastListAdapterProvider,
      Provider<ForecastSlideListAdapter> forecastSlideListAdapterProvider) {
    this.viewModelProvider = viewModelProvider;
    this.linearExtraLayoutManagerAndLinearLayoutManagerProvider =
        linearExtraLayoutManagerAndLinearLayoutManagerProvider;
    this.forecastListAdapterProvider = forecastListAdapterProvider;
    this.forecastSlideListAdapterProvider = forecastSlideListAdapterProvider;
  }

  public static MembersInjector<MainActivity> create(
      Provider<MainViewModel> viewModelProvider,
      Provider<LinearLayoutManager> linearExtraLayoutManagerAndLinearLayoutManagerProvider,
      Provider<ForecastListAdapter> forecastListAdapterProvider,
      Provider<ForecastSlideListAdapter> forecastSlideListAdapterProvider) {
    return new MainActivity_MembersInjector(
        viewModelProvider,
        linearExtraLayoutManagerAndLinearLayoutManagerProvider,
        forecastListAdapterProvider,
        forecastSlideListAdapterProvider);
  }

  @Override
  public void injectMembers(MainActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, viewModelProvider.get());
    injectLinearLayoutManager(
        instance, linearExtraLayoutManagerAndLinearLayoutManagerProvider.get());
    injectLinearExtraLayoutManager(
        instance, linearExtraLayoutManagerAndLinearLayoutManagerProvider.get());
    injectForecastListAdapter(instance, forecastListAdapterProvider.get());
    injectForecastSlideListAdapter(instance, forecastSlideListAdapterProvider.get());
  }

  public static void injectLinearLayoutManager(
      MainActivity instance, LinearLayoutManager linearLayoutManager) {
    instance.linearLayoutManager = linearLayoutManager;
  }

  public static void injectLinearExtraLayoutManager(
      MainActivity instance, LinearLayoutManager linearExtraLayoutManager) {
    instance.linearExtraLayoutManager = linearExtraLayoutManager;
  }

  public static void injectForecastListAdapter(
      MainActivity instance, ForecastListAdapter forecastListAdapter) {
    instance.forecastListAdapter = forecastListAdapter;
  }

  public static void injectForecastSlideListAdapter(
      MainActivity instance, ForecastSlideListAdapter forecastSlideListAdapter) {
    instance.forecastSlideListAdapter = forecastSlideListAdapter;
  }
}
