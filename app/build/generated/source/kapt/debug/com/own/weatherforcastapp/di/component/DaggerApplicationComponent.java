// Generated by Dagger (https://google.github.io/dagger).
package com.own.weatherforcastapp.di.component;

import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import com.own.weatherforcastapp.WeatherForecastApplication;
import com.own.weatherforcastapp.data.remote.NetworkService;
import com.own.weatherforcastapp.di.module.ApplicationModule;
import com.own.weatherforcastapp.di.module.ApplicationModule_ProvideApplicationFactory;
import com.own.weatherforcastapp.di.module.ApplicationModule_ProvideCompositeDisposableFactory;
import com.own.weatherforcastapp.di.module.ApplicationModule_ProvideContextFactory;
import com.own.weatherforcastapp.di.module.ApplicationModule_ProvideNetworkHelperFactory;
import com.own.weatherforcastapp.di.module.ApplicationModule_ProvideNetworkServiceFactory;
import com.own.weatherforcastapp.di.module.ApplicationModule_ProvideSchedulerProviderFactory;
import com.own.weatherforcastapp.di.module.ApplicationModule_ProvideSharedPreferencesFactory;
import com.own.weatherforcastapp.utils.network.NetworkHelper;
import com.own.weatherforcastapp.utils.rx.SchedulerProvider;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private final ApplicationModule applicationModule;

  private Provider<Application> provideApplicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<NetworkService> provideNetworkServiceProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<NetworkHelper> provideNetworkHelperProvider;

  private DaggerApplicationComponent(ApplicationModule applicationModuleParam) {
    this.applicationModule = applicationModuleParam;
    initialize(applicationModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationModule applicationModuleParam) {
    this.provideApplicationProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideApplicationFactory.create(applicationModuleParam));
    this.provideContextProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideContextFactory.create(applicationModuleParam));
    this.provideNetworkServiceProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideNetworkServiceFactory.create(applicationModuleParam));
    this.provideSharedPreferencesProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideSharedPreferencesFactory.create(applicationModuleParam));
    this.provideNetworkHelperProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideNetworkHelperFactory.create(applicationModuleParam));
  }

  @Override
  public void inject(WeatherForecastApplication app) {}

  @Override
  public Application getApplication() {
    return provideApplicationProvider.get();
  }

  @Override
  public Context getContext() {
    return provideContextProvider.get();
  }

  @Override
  public NetworkService getNetworkService() {
    return provideNetworkServiceProvider.get();
  }

  @Override
  public SharedPreferences getSharedPreferences() {
    return provideSharedPreferencesProvider.get();
  }

  @Override
  public NetworkHelper getNetworkHelper() {
    return provideNetworkHelperProvider.get();
  }

  @Override
  public SchedulerProvider getSchedulerProvider() {
    return ApplicationModule_ProvideSchedulerProviderFactory.proxyProvideSchedulerProvider(
        applicationModule);
  }

  @Override
  public CompositeDisposable getCompositeDisposable() {
    return ApplicationModule_ProvideCompositeDisposableFactory.proxyProvideCompositeDisposable(
        applicationModule);
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private Builder() {}

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(applicationModule, ApplicationModule.class);
      return new DaggerApplicationComponent(applicationModule);
    }
  }
}
