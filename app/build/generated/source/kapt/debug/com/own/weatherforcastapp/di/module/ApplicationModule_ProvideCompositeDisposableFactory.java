// Generated by Dagger (https://google.github.io/dagger).
package com.own.weatherforcastapp.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;

public final class ApplicationModule_ProvideCompositeDisposableFactory
    implements Factory<CompositeDisposable> {
  private final ApplicationModule module;

  public ApplicationModule_ProvideCompositeDisposableFactory(ApplicationModule module) {
    this.module = module;
  }

  @Override
  public CompositeDisposable get() {
    return proxyProvideCompositeDisposable(module);
  }

  public static ApplicationModule_ProvideCompositeDisposableFactory create(
      ApplicationModule module) {
    return new ApplicationModule_ProvideCompositeDisposableFactory(module);
  }

  public static CompositeDisposable proxyProvideCompositeDisposable(ApplicationModule instance) {
    return Preconditions.checkNotNull(
        instance.provideCompositeDisposable(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
