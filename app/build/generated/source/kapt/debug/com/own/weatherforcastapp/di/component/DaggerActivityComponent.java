// Generated by Dagger (https://google.github.io/dagger).
package com.own.weatherforcastapp.di.component;

import com.own.weatherforcastapp.data.repository.CurrentWeatherRepository;
import com.own.weatherforcastapp.data.repository.ForcasteRepository;
import com.own.weatherforcastapp.di.module.ActivityModule;
import com.own.weatherforcastapp.di.module.ActivityModule_ProvideForecastAdapterFactory;
import com.own.weatherforcastapp.di.module.ActivityModule_ProvideLinearLayoutManagerFactory;
import com.own.weatherforcastapp.di.module.ActivityModule_ProvideMainViewModelFactory;
import com.own.weatherforcastapp.di.module.ActivityModule_ProvideSlideForecastAdapterFactory;
import com.own.weatherforcastapp.di.module.ActivityModule_ProvideSplashViewModelFactory;
import com.own.weatherforcastapp.ui.base.BaseActivity_MembersInjector;
import com.own.weatherforcastapp.ui.main.MainActivity;
import com.own.weatherforcastapp.ui.main.MainActivity_MembersInjector;
import com.own.weatherforcastapp.ui.main.MainViewModel;
import com.own.weatherforcastapp.ui.splash.SplashActivity;
import com.own.weatherforcastapp.ui.splash.SplashViewModel;
import dagger.internal.Preconditions;

public final class DaggerActivityComponent implements ActivityComponent {
  private final ApplicationComponent applicationComponent;

  private final ActivityModule activityModule;

  private DaggerActivityComponent(
      ActivityModule activityModuleParam, ApplicationComponent applicationComponentParam) {
    this.applicationComponent = applicationComponentParam;
    this.activityModule = activityModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private SplashViewModel getSplashViewModel() {
    return ActivityModule_ProvideSplashViewModelFactory.proxyProvideSplashViewModel(
        activityModule,
        Preconditions.checkNotNull(
            applicationComponent.getSchedulerProvider(),
            "Cannot return null from a non-@Nullable component method"),
        Preconditions.checkNotNull(
            applicationComponent.getCompositeDisposable(),
            "Cannot return null from a non-@Nullable component method"),
        Preconditions.checkNotNull(
            applicationComponent.getNetworkHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private CurrentWeatherRepository getCurrentWeatherRepository() {
    return new CurrentWeatherRepository(
        Preconditions.checkNotNull(
            applicationComponent.getNetworkService(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private ForcasteRepository getForcasteRepository() {
    return new ForcasteRepository(
        Preconditions.checkNotNull(
            applicationComponent.getNetworkService(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private MainViewModel getMainViewModel() {
    return ActivityModule_ProvideMainViewModelFactory.proxyProvideMainViewModel(
        activityModule,
        Preconditions.checkNotNull(
            applicationComponent.getSchedulerProvider(),
            "Cannot return null from a non-@Nullable component method"),
        Preconditions.checkNotNull(
            applicationComponent.getCompositeDisposable(),
            "Cannot return null from a non-@Nullable component method"),
        Preconditions.checkNotNull(
            applicationComponent.getNetworkHelper(),
            "Cannot return null from a non-@Nullable component method"),
        getCurrentWeatherRepository(),
        getForcasteRepository());
  }

  @Override
  public void inject(SplashActivity activity) {
    injectSplashActivity(activity);
  }

  @Override
  public void inject(MainActivity activity) {
    injectMainActivity(activity);
  }

  private SplashActivity injectSplashActivity(SplashActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, getSplashViewModel());
    return instance;
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, getMainViewModel());
    MainActivity_MembersInjector.injectLinearLayoutManager(
        instance,
        ActivityModule_ProvideLinearLayoutManagerFactory.proxyProvideLinearLayoutManager(
            activityModule));
    MainActivity_MembersInjector.injectLinearExtraLayoutManager(
        instance,
        ActivityModule_ProvideLinearLayoutManagerFactory.proxyProvideLinearLayoutManager(
            activityModule));
    MainActivity_MembersInjector.injectForecastListAdapter(
        instance,
        ActivityModule_ProvideForecastAdapterFactory.proxyProvideForecastAdapter(activityModule));
    MainActivity_MembersInjector.injectForecastSlideListAdapter(
        instance,
        ActivityModule_ProvideSlideForecastAdapterFactory.proxyProvideSlideForecastAdapter(
            activityModule));
    return instance;
  }

  public static final class Builder {
    private ActivityModule activityModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public Builder activityModule(ActivityModule activityModule) {
      this.activityModule = Preconditions.checkNotNull(activityModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }

    public ActivityComponent build() {
      Preconditions.checkBuilderRequirement(activityModule, ActivityModule.class);
      Preconditions.checkBuilderRequirement(applicationComponent, ApplicationComponent.class);
      return new DaggerActivityComponent(activityModule, applicationComponent);
    }
  }
}
